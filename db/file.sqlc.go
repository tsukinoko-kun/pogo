// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: file.sql

package db

import (
	"context"
)

const createFile = `-- name: createFile :one
INSERT INTO files (name, executable, content_hash, conflict)
VALUES ($1, $2, $3, $4)
RETURNING id
`

// createFile
//
//	INSERT INTO files (name, executable, content_hash, conflict)
//	VALUES ($1, $2, $3, $4)
//	RETURNING id
func (q *Queries) createFile(ctx context.Context, name string, executable bool, contentHash []byte, conflict bool) (int64, error) {
	row := q.db.QueryRow(ctx, createFile,
		name,
		executable,
		contentHash,
		conflict,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getFileWithExecutable = `-- name: getFileWithExecutable :one
SELECT id FROM files
WHERE content_hash = $1
    AND name = $2
    AND executable = $3
LIMIT 1
`

// getFileWithExecutable
//
//	SELECT id FROM files
//	WHERE content_hash = $1
//	    AND name = $2
//	    AND executable = $3
//	LIMIT 1
func (q *Queries) getFileWithExecutable(ctx context.Context, contentHash []byte, name string, executable bool) (int64, error) {
	row := q.db.QueryRow(ctx, getFileWithExecutable, contentHash, name, executable)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getFileWithoutExecutable = `-- name: getFileWithoutExecutable :one
SELECT id FROM files
WHERE content_hash = $1
    AND name = $2
LIMIT 1
`

// getFileWithoutExecutable
//
//	SELECT id FROM files
//	WHERE content_hash = $1
//	    AND name = $2
//	LIMIT 1
func (q *Queries) getFileWithoutExecutable(ctx context.Context, contentHash []byte, name string) (int64, error) {
	row := q.db.QueryRow(ctx, getFileWithoutExecutable, contentHash, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}
