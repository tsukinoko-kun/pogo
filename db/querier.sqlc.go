// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
)

type Querier interface {
	//AddFileToChange
	//
	//  INSERT INTO change_files (change_id, file_id)
	//  VALUES ($1, $2)
	AddFileToChange(ctx context.Context, changeID int64, fileID int64) error
	//CheckIfChangesSameFileCount
	//
	//  SELECT
	//      (SELECT COUNT(a.file_id) FROM change_files AS a WHERE a.change_id = $1) =
	//      (SELECT COUNT(b.file_id) FROM change_files AS b WHERE b.change_id = $2) AS have_same_number_of_files
	CheckIfChangesSameFileCount(ctx context.Context, changeID int64, changeID_2 int64) (bool, error)
	//ClearChange
	//
	//  DELETE FROM change_files WHERE change_id = $1
	ClearChange(ctx context.Context, changeID int64) error
	//CopyFileList
	//
	//  INSERT INTO change_files (change_id, file_id)
	//  SELECT $1, file_id
	//  FROM change_files
	//  AS old
	//  WHERE old.change_id = $2
	CopyFileList(ctx context.Context, newID int64, oldID int64) error
	//CreateChange
	//
	//  INSERT INTO changes (repository_id, name, description, author, device, depth)
	//  VALUES ($1, $2, $3, $4, $5, $6)
	//  RETURNING id
	CreateChange(ctx context.Context, repositoryID int32, name string, description *string, author string, device string, depth int64) (int64, error)
	//CreateRepo
	//
	//  INSERT INTO repositories (name)
	//  VALUES ($1)
	//  RETURNING id
	CreateRepo(ctx context.Context, name string) (int32, error)
	//FindChangeExact
	//
	//  SELECT id, repository_id, name, description, author, device, depth, created_at, updated_at FROM changes WHERE repository_id = $1 AND name = $2 LIMIT 1
	FindChangeExact(ctx context.Context, repositoryID int32, name string) (Change, error)
	//GetAllBookmarks
	//
	//  SELECT id, repository_id, name, change_id FROM bookmarks
	//  WHERE repository_id = $1
	//      AND bookmarks.name NOT LIKE '__head-%'
	GetAllBookmarks(ctx context.Context, repositoryID int32) ([]Bookmark, error)
	//GetAncestryOfChange
	//
	//  WITH RECURSIVE ancestry AS (
	//    -- Base case: the target change
	//    SELECT $1::bigint AS id
	//    UNION
	//    -- Recursive case: find all ancestors
	//    SELECT cr.parent_id
	//    FROM ancestry a
	//    JOIN change_relations cr
	//      ON cr.change_id = a.id
	//    WHERE cr.parent_id IS NOT NULL
	//  )
	//  SELECT
	//    c.id, c.repository_id, c.name, c.description, c.author, c.device, c.depth, c.created_at, c.updated_at,
	//    cr.parent_id,
	//    cr.change_id
	//  FROM ancestry a
	//  JOIN changes c
	//    ON c.id = a.id
	//  LEFT JOIN change_relations cr
	//    ON cr.change_id = c.id
	//  WHERE c.repository_id = $3::integer
	//  LIMIT $2
	GetAncestryOfChange(ctx context.Context, column1 int64, limit int32, column3 int32) ([]GetAncestryOfChangeRow, error)
	//GetBookmark
	//
	//  SELECT change_id FROM bookmarks WHERE repository_id = $1 AND name = $2 LIMIT 1
	GetBookmark(ctx context.Context, repositoryID int32, name string) (int64, error)
	//GetChangeConflicts
	//
	//  SELECT files.name
	//  FROM change_files
	//  INNER JOIN files ON files.id = change_files.file_id
	//  WHERE change_files.change_id = $1 AND files.conflict = true
	GetChangeConflicts(ctx context.Context, changeID int64) ([]string, error)
	//GetChangeDepth
	//
	//  SELECT depth FROM changes WHERE id = $1 AND repository_id = $2 LIMIT 1
	GetChangeDepth(ctx context.Context, iD int64, repositoryID int32) (int64, error)
	//GetChangeDescription
	//
	//  SELECT description FROM changes WHERE id = $1 LIMIT 1
	GetChangeDescription(ctx context.Context, id int64) (*string, error)
	//GetChangeIgnorefiles
	//
	//  SELECT files.name, files.content_hash FROM files
	//  INNER JOIN change_files ON change_files.file_id = files.id
	//  WHERE change_files.change_id = $1
	GetChangeIgnorefiles(ctx context.Context, changeID int64) ([]GetChangeIgnorefilesRow, error)
	//GetChangeName
	//
	//  SELECT name FROM changes WHERE id = $1 AND repository_id = $2 LIMIT 1
	GetChangeName(ctx context.Context, iD int64, repositoryID int32) (string, error)
	//GetChangeOwner
	//
	//  SELECT author, device FROM changes WHERE id = $1 LIMIT 1
	GetChangeOwner(ctx context.Context, id int64) (GetChangeOwnerRow, error)
	//GetChangePrefix
	//
	//  WITH RECURSIVE lengths_series(l) AS (
	//    SELECT 1
	//    UNION ALL
	//    SELECT l + 1
	//    FROM lengths_series
	//    WHERE l < 64
	//  )
	//  SELECT
	//    (SUBSTRING(
	//       c.name
	//       FROM 1 FOR (
	//         SELECT ls.l
	//         FROM lengths_series AS ls
	//         WHERE ls.l <= CHAR_LENGTH(c.name)
	//           AND NOT EXISTS (
	//             SELECT 1
	//             FROM changes AS c_other
	//             WHERE c.id != c_other.id
	//               AND c.repository_id = c_other.repository_id
	//               AND SUBSTRING(c.name FROM 1 FOR ls.l)
	//                 = SUBSTRING(c_other.name FROM 1 FOR ls.l)
	//           )
	//         ORDER BY ls.l
	//         LIMIT 1
	//       )
	//     )::TEXT) AS unique_identifier
	//  FROM changes AS c
	//  WHERE c.id = $1
	//    AND c.repository_id = $2
	//  LIMIT 1
	GetChangePrefix(ctx context.Context, iD int64, repositoryID int32) (string, error)
	//GetRepoByName
	//
	//  SELECT id FROM repositories WHERE name = $1 LIMIT 1
	GetRepoByName(ctx context.Context, name string) (int32, error)
	//HasChangeChild
	//
	//  SELECT EXISTS (
	//      SELECT 1
	//      FROM change_relations
	//      WHERE parent_id = $1
	//  )
	HasChangeChild(ctx context.Context, parentID *int64) (bool, error)
	//HasChangeConflicts
	//
	//  SELECT EXISTS (
	//      SELECT 1
	//      FROM change_files
	//      INNER JOIN files ON files.id = change_files.file_id
	//      WHERE change_files.change_id = $1 AND files.conflict = true
	//      LIMIT 1
	//  )
	HasChangeConflicts(ctx context.Context, changeID int64) (bool, error)
	//ListChangeFiles
	//
	//  SELECT files.name, files.executable, files.content_hash FROM change_files
	//  INNER JOIN files ON files.id = change_files.file_id
	//  WHERE change_files.change_id = $1
	ListChangeFiles(ctx context.Context, changeID int64) ([]ListChangeFilesRow, error)
	//SetBookmark
	//
	//  INSERT INTO bookmarks (repository_id, name, change_id)
	//  VALUES ($1, $2, $3)
	//  ON CONFLICT (repository_id, name)
	//  DO UPDATE SET change_id = $3
	SetBookmark(ctx context.Context, repositoryID int32, name string, changeID int64) error
	//SetChangeDepth
	//
	//  UPDATE changes
	//  SET depth = $2
	//  WHERE id = $1
	SetChangeDepth(ctx context.Context, iD int64, depth int64) error
	//SetChangeDescription
	//
	//  UPDATE changes
	//  SET description = $2, updated_at = CURRENT_TIMESTAMP, author = $3, device = $4
	//  WHERE id = $1
	SetChangeDescription(ctx context.Context, iD int64, description *string, author string, device string) error
	//SetChangeParent
	//
	//  INSERT INTO change_relations (change_id, parent_id)
	//  VALUES ($1, $2)
	//  ON CONFLICT (change_id, parent_id)
	//  DO NOTHING
	SetChangeParent(ctx context.Context, changeID int64, parentID *int64) error
	//createFile
	//
	//  INSERT INTO files (name, executable, content_hash, conflict)
	//  VALUES ($1, $2, $3, $4)
	//  RETURNING id
	createFile(ctx context.Context, name string, executable bool, contentHash []byte, conflict bool) (int64, error)
	//findChanges
	//
	//  SELECT DISTINCT c.id
	//  FROM changes AS c
	//  LEFT JOIN bookmarks AS b
	//      ON b.change_id = c.id AND b.repository_id = c.repository_id
	//  WHERE c.repository_id = $1
	//      AND (c.name LIKE $2::text || '%' OR b.name = $2::text)
	//  LIMIT $3
	findChanges(ctx context.Context, repositoryID int32, search string, limit int32) ([]int64, error)
	//getFileWithExecutable
	//
	//  SELECT id FROM files
	//  WHERE content_hash = $1
	//      AND name = $2
	//      AND executable = $3
	//  LIMIT 1
	getFileWithExecutable(ctx context.Context, contentHash []byte, name string, executable bool) (int64, error)
	//getFileWithoutExecutable
	//
	//  SELECT id FROM files
	//  WHERE content_hash = $1
	//      AND name = $2
	//  LIMIT 1
	getFileWithoutExecutable(ctx context.Context, contentHash []byte, name string) (int64, error)
}

var _ Querier = (*Queries)(nil)
